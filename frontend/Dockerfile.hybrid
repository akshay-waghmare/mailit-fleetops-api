# ðŸš€ FleetOps Frontend Hybrid Dockerfile
# Supports both pre-built files and source building
# Automatically detects which approach to use

FROM node:20-alpine AS builder

# Set working directory
WORKDIR /app

# Copy package files for dependency installation
COPY package*.json ./
COPY apps/console-app/package*.json ./apps/console-app/ 2>/dev/null || true
COPY apps/ui-kit/package*.json ./apps/ui-kit/ 2>/dev/null || true

# Install dependencies if package.json exists
RUN if [ -f "package.json" ]; then npm ci --silent; fi

# Copy source code if it exists
COPY apps/ ./apps/ 2>/dev/null || true
COPY libs/ ./libs/ 2>/dev/null || true
COPY src/ ./src/ 2>/dev/null || true
COPY angular.json ./angular.json 2>/dev/null || true
COPY tsconfig*.json ./ 2>/dev/null || true
COPY tailwind.config.js ./tailwind.config.js 2>/dev/null || true
COPY postcss.config.js ./postcss.config.js 2>/dev/null || true

# Check if dist folder exists (pre-built), if not build from source
RUN if [ -d "dist/console-app/browser" ]; then \
      echo "âœ… Using pre-built dist folder"; \
      mkdir -p /build && cp -r dist/console-app/browser/* /build/; \
    else \
      echo "ðŸ”¨ Building application from source"; \
      npm run build:all && cp -r dist/console-app/browser/* /build/; \
    fi

# ==========================================
# Production Stage with Nginx
# ==========================================
FROM nginx:alpine AS production

# Install curl for health checks
RUN apk add --no-cache curl

# Copy custom nginx configuration
COPY nginx.conf /etc/nginx/nginx.conf

# Copy built application from builder stage
COPY --from=builder /build/ /usr/share/nginx/html/

# Set permissions for web content
RUN chown -R nginx:nginx /usr/share/nginx/html

# Expose port 80
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:80/ || exit 1

# Start nginx
CMD ["nginx", "-g", "daemon off;"]