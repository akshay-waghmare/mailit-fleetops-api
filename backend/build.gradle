plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.5'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'org.flywaydb.flyway' version '10.19.0'
}

group = 'com.fleetops'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'
targetCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot Starters
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-quartz'
    
    // Database
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-database-postgresql'
    runtimeOnly 'org.postgresql:postgresql'
    
    // H2 for development and testing
    runtimeOnly 'com.h2database:h2'
    
    // Spatial data support (let Spring Boot manage the version)
    implementation 'org.hibernate.orm:hibernate-spatial'
    implementation 'org.locationtech.jts:jts-core:1.19.0'
    
    // JWT and Security
    implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'
    
    // Utilities
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    
    // MapStruct (optional)
    implementation 'org.mapstruct:mapstruct:1.6.2'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.2'
    
    // Hibernate Types for JSONB mapping (PostgreSQL) - Temporarily removed due to Hibernate 6.5 compatibility
    // implementation 'com.vladmihalcea:hibernate-types-60:2.21.1'
    
    // Apache POI for Excel processing
    implementation 'org.apache.poi:poi-ooxml:5.2.5'
    
    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
    imports {
        mavenBom "org.testcontainers:testcontainers-bom:1.20.2"
    }
}

// Task to ensure PostGIS is enabled before tests
task ensureTestDbSetup {
    group = 'database'
    description = 'Ensures test database has PostGIS enabled'
    
    doLast {
        if (System.getProperty('os.name').toLowerCase().contains('windows')) {
            exec {
                commandLine 'cmd', '/c', 'docker', 'exec', 'fleetops-postgres', 'psql', '-U', 'fleetops', '-d', 'fleetops_test', '-c', 'CREATE EXTENSION IF NOT EXISTS postgis;'
                ignoreExitValue = true
            }
        } else {
            exec {
                commandLine 'docker', 'exec', 'fleetops-postgres', 'psql', '-U', 'fleetops', '-d', 'fleetops_test', '-c', 'CREATE EXTENSION IF NOT EXISTS postgis;'
                ignoreExitValue = true
            }
        }
        println '‚úÖ Test database setup verified (PostGIS extension enabled)'
    }
}

tasks.named('test') {
    useJUnitPlatform()
    dependsOn ensureTestDbSetup
}

// Also ensure setup when build is run (since build includes test)
tasks.named('build') {
    dependsOn ensureTestDbSetup
}

// Task to reset test database when needed
task resetTestDb {
    group = 'database'
    description = 'Resets the test database (drops and recreates with PostGIS)'
    
    doLast {
        def isWindows = System.getProperty('os.name').toLowerCase().contains('windows')
        def cmdPrefix = isWindows ? ['cmd', '/c'] : []
        
        println 'üóëÔ∏è  Dropping existing test database...'
        exec {
            commandLine cmdPrefix + ['docker', 'exec', 'fleetops-postgres', 'psql', '-U', 'fleetops', '-d', 'postgres', '-c', 'DROP DATABASE IF EXISTS fleetops_test;']
            ignoreExitValue = true
        }
        
        println 'üÜï Creating fresh test database...'
        exec {
            commandLine cmdPrefix + ['docker', 'exec', 'fleetops-postgres', 'psql', '-U', 'fleetops', '-d', 'postgres', '-c', 'CREATE DATABASE fleetops_test OWNER fleetops;']
        }
        
        println 'üåç Enabling PostGIS extension...'
        exec {
            commandLine cmdPrefix + ['docker', 'exec', 'fleetops-postgres', 'psql', '-U', 'fleetops', '-d', 'fleetops_test', '-c', 'CREATE EXTENSION IF NOT EXISTS postgis;']
        }
        
        exec {
            commandLine cmdPrefix + ['docker', 'exec', 'fleetops-postgres', 'psql', '-U', 'fleetops', '-d', 'fleetops_test', '-c', 'CREATE EXTENSION IF NOT EXISTS postgis_topology;']
            ignoreExitValue = true
        }
        
        println '‚úÖ Test database reset complete! Flyway will apply migrations automatically when tests run.'
    }
}

// Task to fix V4/V15 migration conflict for developers who have old V4
task fixMigrationConflict {
    group = 'database'
    description = 'Fixes V4/V15 migration conflict by updating Flyway history'
    
    doLast {
        def isWindows = System.getProperty('os.name').toLowerCase().contains('windows')
        def cmdPrefix = isWindows ? ['cmd', '/c'] : []
        
        println 'üîß Checking for V4/V15 migration conflict...'
        
        try {
            // Check if V4 exists in dev database
            def result = new ByteArrayOutputStream()
            exec {
                commandLine cmdPrefix + ['docker', 'exec', 'fleetops-postgres', 'psql', '-U', 'fleetops', '-d', 'fleetops_dev', '-t', '-c', "SELECT COUNT(*) FROM flyway_schema_history WHERE version = '4';"]
                standardOutput = result
                ignoreExitValue = true
            }
            
            if (result.toString().trim().contains('1')) {
                println '‚ö†Ô∏è  Found V4 migration in dev database. Fixing conflict...'
                
                // Delete V4 entry since V15 already exists with same content
                exec {
                    commandLine cmdPrefix + ['docker', 'exec', 'fleetops-postgres', 'psql', '-U', 'fleetops', '-d', 'fleetops_dev', '-c', "DELETE FROM flyway_schema_history WHERE version = '4' AND description = 'Fix Place Type Constraint';"]
                }
                
                println '‚úÖ Migration conflict fixed! V4 migration removed (V15 already exists with same content).'
                println '   You can now run migrations normally.'
            } else {
                println '‚úÖ No V4/V15 conflict detected in dev database.'
            }
            
        } catch (Exception e) {
            println '‚ùå Error checking dev database. Make sure PostgreSQL container is running:'
            println '   docker compose up -d postgres'
        }
    }
}

// Task to check database status
task checkTestDb {
    group = 'database'
    description = 'Checks the test database status and displays useful information'
    
    doLast {
        def isWindows = System.getProperty('os.name').toLowerCase().contains('windows')
        def cmdPrefix = isWindows ? ['cmd', '/c'] : []
        
        println '\nüìä Test Database Status:'
        println '=' * 60
        
        try {
            exec {
                commandLine cmdPrefix + ['docker', 'exec', 'fleetops-postgres', 'psql', '-U', 'fleetops', '-d', 'fleetops_test', '-c', '\\dx']
            }
            
            println '\nüìã Tables:'
            exec {
                commandLine cmdPrefix + ['docker', 'exec', 'fleetops-postgres', 'psql', '-U', 'fleetops', '-d', 'fleetops_test', '-c', '\\dt']
            }
            
            println '\nüîÑ Flyway Migrations:'
            exec {
                commandLine cmdPrefix + ['docker', 'exec', 'fleetops-postgres', 'psql', '-U', 'fleetops', '-d', 'fleetops_test', '-c', 'SELECT version, description, installed_on FROM flyway_schema_history ORDER BY installed_rank;']
                ignoreExitValue = true
            }
        } catch (Exception e) {
            println '‚ùå Error connecting to test database. Make sure PostgreSQL container is running:'
            println '   docker compose up -d postgres'
        }
    }
}

// Task to check dev database for migration conflicts
task checkDevDb {
    group = 'database'
    description = 'Checks the dev database for potential migration conflicts'
    
    doLast {
        def isWindows = System.getProperty('os.name').toLowerCase().contains('windows')
        def cmdPrefix = isWindows ? ['cmd', '/c'] : []
        
        println '\nüìä Dev Database Status:'
        println '=' * 60
        
        try {
            println '\nüîÑ Flyway Migrations:'
            exec {
                commandLine cmdPrefix + ['docker', 'exec', 'fleetops-postgres', 'psql', '-U', 'fleetops', '-d', 'fleetops_dev', '-c', 'SELECT version, description, installed_on FROM flyway_schema_history ORDER BY installed_rank;']
            }
            
            // Check for V4/V15 conflict
            def result = new ByteArrayOutputStream()
            exec {
                commandLine cmdPrefix + ['docker', 'exec', 'fleetops-postgres', 'psql', '-U', 'fleetops', '-d', 'fleetops_dev', '-t', '-c', "SELECT COUNT(*) FROM flyway_schema_history WHERE version IN ('4', '15');"]
                standardOutput = result
                ignoreExitValue = true
            }
            
            def count = result.toString().trim() as Integer
            if (count > 1) {
                println '\n‚ö†Ô∏è  WARNING: Potential V4/V15 migration conflict detected!'
                println '   Run: ./gradlew fixMigrationConflict'
            } else {
                println '\n‚úÖ No migration conflicts detected.'
            }
            
        } catch (Exception e) {
            println '‚ùå Error connecting to dev database. Make sure PostgreSQL container is running:'
            println '   docker compose up -d postgres'
        }
    }
}

// Flyway configuration
flyway {
    url = project.findProperty('flyway.url') ?: 'jdbc:postgresql://localhost:5432/fleetops_dev'
    user = project.findProperty('flyway.user') ?: 'fleetops'
    password = project.findProperty('flyway.password') ?: 'fleetops'
    locations = ['classpath:db/migration']
}
